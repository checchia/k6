// Code generated by "enumer -type=tagFormatType -trimprefix tagFormat -transform snake -output tag_format_gen.go"; DO NOT EDIT.

//
package statsd

import (
	"fmt"
)

const _tagFormatTypeName = "nonedatadognewrelicstatsdv2"

var _tagFormatTypeIndex = [...]uint8{0, 4, 11, 19, 27}

func (i tagFormatType) String() string {
	if i < 0 || i >= tagFormatType(len(_tagFormatTypeIndex)-1) {
		return fmt.Sprintf("tagFormatType(%d)", i)
	}
	return _tagFormatTypeName[_tagFormatTypeIndex[i]:_tagFormatTypeIndex[i+1]]
}

var _tagFormatTypeValues = []tagFormatType{0, 1, 2, 3}

var _tagFormatTypeNameToValueMap = map[string]tagFormatType{
	_tagFormatTypeName[0:4]:   0,
	_tagFormatTypeName[4:11]:  1,
	_tagFormatTypeName[11:19]: 2,
	_tagFormatTypeName[19:27]: 3,
}

// tagFormatTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func tagFormatTypeString(s string) (tagFormatType, error) {
	if val, ok := _tagFormatTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to tagFormatType values", s)
}

// tagFormatTypeValues returns all values of the enum
func tagFormatTypeValues() []tagFormatType {
	return _tagFormatTypeValues
}

// IsAtagFormatType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i tagFormatType) IsAtagFormatType() bool {
	for _, v := range _tagFormatTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
